(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{152:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("ul",[a("li",[s._v("原文地址："),a("a",{attrs:{href:"https://fengsp.github.io/blog/2017/3/python-dictionary/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Python dictionary, the implementation"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("原文作者："),a("a",{attrs:{href:"https://twitter.com/_fengsp",target:"_blank",rel:"noopener noreferrer"}},[s._v("Shipeng Feng"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("译文出自："),a("a",{attrs:{href:"https://blog.zthxxx.me/post/python-dictionary-implementation/",target:"_blank",rel:"noopener noreferrer"}},[s._v("zthxxx's blog"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("译者："),a("a",{attrs:{href:"https://github.com/zthxxx",target:"_blank",rel:"noopener noreferrer"}},[s._v("zthxxx"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("校对者："),a("a",{attrs:{href:"https://github.com/Zheaoli",target:"_blank",rel:"noopener noreferrer"}},[s._v("Zheaoli"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("注：原文与本译文均基于 "),a("strong",[s._v("CC BY-NC-SA")]),s._v(" 发布")])])]),s._v(" "),a("p",[s._v("字典是一种内置于 Python 中非常有用的数据类型，总的来说它是一些由键（key）索引的对象，这里的 key 是必须是不可变的。 以下是一个简单的字典用法示例：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fengsp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'amy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fengsp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fengsp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'amy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("通常我们会多次的检索一个值（value），因此通过 key 来检索一个对象的过程必须是个非常快速的操作。对于 CPython 本身，多种语法特性都是在字典的帮助下支持的，例如，类实例就是使用字典来储存实例属性，可见字典的性能至关重要。")]),s._v(" "),a("h2",{attrs:{id:"pydictobject-结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pydictobject-结构体","aria-hidden":"true"}},[s._v("#")]),s._v(" PyDictObject 结构体")]),s._v(" "),a("p",[s._v("在 CPython 源码中，字典是一个 C 的结构体， "),a("code",[s._v("PyDictObject")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PyDictObject")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    PyObject_HEAD\n    Py_ssize_t ma_fill"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* # Active + # Dummy */")]),s._v("\n    Py_ssize_t ma_used"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* # Active */")]),s._v("\n    Py_ssize_t ma_mask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    PyDictEntry "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ma_table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    PyDictEntry "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ma_lookup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("PyDictObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" PyObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    PyDictEntry ma_smalltable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("PyDict_MINSIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Py_ssize_t me_hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    PyObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("me_key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    PyObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("me_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" PyDictEntry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("在此数据结构中的这些字段分别是：")]),s._v(" "),a("h3",{attrs:{id:"ma-fill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ma-fill","aria-hidden":"true"}},[s._v("#")]),s._v(" "),a("strong",[s._v("ma_fill")])]),s._v(" "),a("p",[s._v("表示所有激活元素（active entry）和虚拟元素（dummy entry）的计数。\n如果删除一个 key，这个元素将成为虚拟元素，并且 "),a("code",[s._v("ma_fill")]),s._v(" 任然保持不变；如果添加一个新的 key 并且新 key 不属于虚拟元素，则 "),a("code",[s._v("ma_fill")]),s._v(" 增加 1。")]),s._v(" "),a("h3",{attrs:{id:"ma-used"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ma-used","aria-hidden":"true"}},[s._v("#")]),s._v(" "),a("strong",[s._v("ma_used")])]),s._v(" "),a("p",[s._v("对象中所有激活元素的计数。如果添加一个新 key，"),a("code",[s._v("ma_used")]),s._v(" 会增加 1，如果删除一个 key，这个字段将减 1。")]),s._v(" "),a("h3",{attrs:{id:"ma-mask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ma-mask","aria-hidden":"true"}},[s._v("#")]),s._v(" "),a("strong",[s._v("ma_mask")])]),s._v(" "),a("p",[s._v("哈希表的位掩码，这个表中包含 "),a("code",[s._v("ma_mask + 1")]),s._v(" 个哈希槽(slot)。\n这里储存位掩码而不是大小，因为在查找元素的一个 key 时，使用 "),a("code",[s._v("slot = key_hash & mask")]),s._v(" 就能直接获得哈希槽序号。")]),s._v(" "),a("h3",{attrs:{id:"ma-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ma-table","aria-hidden":"true"}},[s._v("#")]),s._v(" "),a("strong",[s._v("ma_table")])]),s._v(" "),a("p",[s._v("一个 "),a("code",[s._v("PyDictEntry")]),s._v(" 结构体的数组， "),a("code",[s._v("PyDictEntry")]),s._v(" 包含 key 对象、value 对象，以及 key 的哈希；\n这些 key 的哈希作为缓存储存起来，例如，当我们搜索一个 key 时，我们可以通过使用缓存哈希来执行快速比较查找。")]),s._v(" "),a("h3",{attrs:{id:"ma-lookup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ma-lookup","aria-hidden":"true"}},[s._v("#")]),s._v(" "),a("strong",[s._v("ma_lookup")])]),s._v(" "),a("p",[s._v("一个用于查找 key 的函数指针。初始化时它被设置为 "),a("code",[s._v("lookdict_string")]),s._v("。\n"),a("code",[s._v("lookdict_string")]),s._v(" 假定字典的 key 全是 "),a("code",[s._v("PyStringObject")]),s._v(" 类型，这是一个使得查找 "),a("code",[s._v("StringDictObject")]),s._v(" 类型的 key 可以快很多的最佳优化。\n如果一个 key 不是 "),a("code",[s._v("PyStringObject")]),s._v(" 类型，那么"),a("code",[s._v("ma_lookup")]),s._v(" 将改为一种更慢的普通查找函数。")]),s._v(" "),a("h3",{attrs:{id:"ma-smalltable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ma-smalltable","aria-hidden":"true"}},[s._v("#")]),s._v(" "),a("strong",[s._v("ma_smalltable")])]),s._v(" "),a("p",[s._v("一个有 8 个槽的哈希表（译者注：这里应该是最小 8 个槽，因为 "),a("code",[s._v("PyDict_MINSIZE=8")]),s._v("）。\n这样小字典也能直接存储在这里，并且不会再调用 "),a("code",[s._v("malloc()")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"碰撞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#碰撞","aria-hidden":"true"}},[s._v("#")]),s._v(" 碰撞")]),s._v(" "),a("p",[s._v("两个不同的 key 可能会被散列到相同的槽，这被称之为碰撞。当碰撞发生时，Python 使用 "),a("em",[s._v("开放寻址法")]),s._v(" 来解决碰撞：如果这个槽不能再容纳这个 key（译者注：指槽中已经有 key），那么就寻找其他槽。")]),s._v(" "),a("p",[s._v("例如，这里有个简单的方法，如果槽 "),a("code",[s._v("i")]),s._v(" 不能再容纳这个 key，就尝试槽 "),a("code",[s._v("i+1")]),s._v(" 、"),a("code",[s._v("i+2")]),s._v(" 等等。对于每条哈希，我们现在定义了能容纳它的所有槽的列表，如果删除其中一个 key，整个列表将会被破坏，这就是这里为什么我们需要虚拟元素（dummy）。")]),s._v(" "),a("p",[s._v("这个简单的开放寻址线性算法会使其退化为线性堆，这将导致性能降低，因为我们每次查找一个 key 都要扫描所有的槽。在实际中，CPython 使用如下算法：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("DUMMY "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dummy'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以我的水平并不足够理解算法是如何工作的，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 最后的结果会覆盖 0 到 ma_mask 之间的所有整数。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("open_addressing_in_cpython")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    free_slot "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n    perturb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("hash")]),s._v("\n    i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" slot_index "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("hash")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" ma_mask\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slot_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slot_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slot_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" DUMMY "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" free_slot "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            free_slot "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" slot_index\n        i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" perturb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        slot_index "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" ma_mask\n        perturb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slot_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" free_slot "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" free_slot\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" slot_index\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"哈希表大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希表大小","aria-hidden":"true"}},[s._v("#")]),s._v(" 哈希表大小")]),s._v(" "),a("p",[s._v("如果我们持续添加 key 到字典中，那很快就会没有足够的空间来装下所有的 keys，现在就需要对哈希表扩容（resize）。")]),s._v(" "),a("p",[s._v("CPython 会在每次添加 key 时检查表大小，如果哈希表已经处于三分之二满（相对于 "),a("code",[s._v("ma_fill")]),s._v("），将扩容哈希表。如果字典中包含接近或超过 50000 keys，扩容后新的大小将为 "),a("code",[s._v("ma_used * 4")]),s._v("，其他时候扩容后为 "),a("code",[s._v("ma_used * 2")]),s._v("。")]),s._v(" "),a("p",[s._v("哈希表不会在从字典中删除大量 keys 时引发调整大小，这意味着哈希表将不会变小。这不是什么大问题，因为大多数时候我们我们只使用字典一段时间，然后就丢弃掉整个字典。如果你真的建立了一个非常大的字典，并且从中删除了许多 keys，那么你应该用剩余的 key 创建一个新的字典。")]),s._v(" "),a("h2",{attrs:{id:"空闲列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空闲列表","aria-hidden":"true"}},[s._v("#")]),s._v(" 空闲列表")]),s._v(" "),a("p",[s._v("许多字典实例被频繁的创建和销毁，为了减少创建和销毁的次数，一种 "),a("code",[s._v("free_dicts")]),s._v(" 数组被用于容纳不再使用的字典对象，相当于一个简单的缓存。如果我们需要一个 "),a("code",[s._v("PyDictObject")]),s._v(" 对象，它将从可用的空闲列表中获取。")]),s._v(" "),a("h2",{attrs:{id:"键共享与有序字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#键共享与有序字典","aria-hidden":"true"}},[s._v("#")]),s._v(" 键共享与有序字典")]),s._v(" "),a("p",[s._v("当字典用作对象属性的容器时，它们会占用比必要更多的内存，因为键是相同的，但它们却被复制到每个实例中了。自 Python 3.6 起，一个属性字典与同一类实例的其他属性字典共用 keys，例如有如下这样的类：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" username\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("email "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" email\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这些属性字典将会被像这样存储：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这是在属性字典之间共享的")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 并且这也是排序的")]),s._v("\nkeys "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5317300778844242624")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'username'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("268341141884068675")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'email'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this hash table just stores the index to the key entries")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个哈希表仅把索引存储到键元素中")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这是简化的")]),s._v("\nindex_table "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这是值")]),s._v("\nvalues "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'user01'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'user01@example.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"我的想法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我的想法","aria-hidden":"true"}},[s._v("#")]),s._v(" 我的想法")]),s._v(" "),a("p",[s._v("CPython 中字典的实现过程是非常简洁明了和易懂的。它的代码优美而高效，所有的参数选择都是经过实践的，例如，其中 "),a("code",[s._v("free_dicts")]),s._v(" 和 "),a("code",[s._v("ma_smalltable")]),s._v(" 参数的大小。我爱它们。")])])},[],!1,null,null,null);t.default=e.exports}}]);